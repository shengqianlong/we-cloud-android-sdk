apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

String gaUrl = "api.wecloud.cn:10007/file/" //正式环境
String alphaUrl = "api-wecloud.da300.com:10007/file/"// 新加坡内测URL
String devUrl ="192.168.1.95:11007/file/"//
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    flavorDimensions "versionCode"
    //暂时先这样写，后续要放在lib_base
    productFlavors {
        //内测
        dev {
            buildConfigField "String", "BASE_URL", "\"http://$devUrl\""//8001基本内测
        }
        //内测
        alpha {
            buildConfigField "String", "BASE_URL", "\"https://$alphaUrl\""//8001基本内测
        }
        //正式版
        ga {
            buildConfigField "String", "BASE_URL", "\"https://$gaUrl\""//8001基本内测
        }
    }
}


////Copy类型
//task makeJar(type: Copy) {
//    //删除存在的
//    delete 'build/outputs/wecloud.jar'
//    //设置拷贝的文件
//    from('build/intermediates/packaged-classes/ga/release/')
//
//    //打进jar包后的文件目录
//    into('build/outputs/')
//    //include ,exclude参数来设置过滤
//    include('classes.jar')
//////    //指定打包的class
//    include "cn/wecloud/storage/*.class"
//    include "com/squareup/**/*.class"
//    include "io/reactivex/**/*.class"
//
//    //重命名
//    rename ('classes.jar', 'wecloud.jar')
//}
//makeJar.dependsOn(build)

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.40"
    //Retrofit2
    implementation "com.squareup.retrofit2:retrofit:2.4.0"
    implementation "com.squareup.retrofit2:retrofit-converters:2.4.0"
    implementation("com.squareup.retrofit2:adapter-rxjava2:2.4.0")
            { exclude group: 'io.reactivex.rxjava2' }
    implementation "com.squareup.retrofit2:converter-gson:2.4.0"

    implementation "io.reactivex.rxjava2:rxjava:2.2.8"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

//    implementation 'com.chanjx:chanjx-utils:1.0.2'
}

def siteUrl = 'https://github.com/smuyyh/BankCardFormat'    // Git项目主页
def gitUrl = 'https://github.com/smuyyh/BankCardFormat.git' // Git仓库url
group = "cn.wecloud.storage" // 一般为包名
install {
    repositories.mavenInstaller {
        // 生成POM.xml
        pom {
            project {
                packaging 'aar'
                name 'weCloud Sdk' // 项目描述
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer { // 开发者个人信息
                        id 'fc'
                        name 'fc'
                        email '524406642@qq.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//task javadoc(type: Javadoc) {
//    options.encoding = "UTF-8" // 设置编码，否则中文可能会提示出错
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}
