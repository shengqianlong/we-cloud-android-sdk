apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//
//apply plugin: 'com.github.dcendents.android-maven'
//
//repositories {
//    mavenCentral()
//    google()
//    jcenter()
//    maven { url "https://jitpack.io" }
//}
//
//group='com.github.xihehe '//com.github.{你的的账号名}

String gaUrl = "api.wecloud.cn:10007/file/" //正式环境
String alphaUrl = "api-wecloud.da300.com:10007/file/"// 新加坡内测URL
String devUrl ="192.168.1.95:11007/file/"//

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    flavorDimensions "versionCode"

    //暂时先这样写，后续要放在lib_base
    productFlavors {
        //内测
        dev {
            buildConfigField "String", "BASE_URL", "\"http://$devUrl\""//8001基本内测
        }
        //内测
        alpha {
            buildConfigField "String", "BASE_URL", "\"https://$alphaUrl\""//8001基本内测
        }
        //正式版
        ga {
            buildConfigField "String", "BASE_URL", "\"https://$gaUrl\""//8001基本内测
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.40"

    implementation files('libs/adapter-rxjava2-2.4.0.jar')
    implementation files('libs/converter-gson-2.4.0.jar')
    implementation files('libs/okhttp-3.10.0.jar')
    implementation files('libs/okio-1.14.0.jar')
    implementation files('libs/retrofit-2.4.0.jar')
    implementation files('libs/rxandroid-2.1.1.jar')
    implementation files('libs/rxjava-2.2.8.jar')
    implementation files('libs/gson-2.8.2.jar')
    implementation files('libs/reactive-streams-1.0.2.jar')
    //Retrofit2
//    implementation "com.squareup.retrofit2:retrofit:2.4.0"
//    implementation "com.squareup.retrofit2:retrofit-converters:2.4.0"
//    implementation("com.squareup.retrofit2:adapter-rxjava2:2.4.0")
//            { exclude group: 'io.reactivex.rxjava2' }
//    implementation "com.squareup.retrofit2:converter-gson:2.4.0"
//
//    implementation "io.reactivex.rxjava2:rxjava:2.2.8"
//    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
}


////Copy类型
//task makeJar(type: Copy) {
//    //删除存在的
//    delete 'build/outputs/wecloud.jar'
//    //设置拷贝的文件
//    from('build/intermediates/packaged-classes/ga/release/')
//
//    from(project.zipTree('libs/adapter-rxjava2-2.4.0.jar'))
//    from(project.zipTree('libs/converter-gson-2.4.0.jar'))
//    from(project.zipTree('libs/okhttp-3.10.0.jar'))
//    from(project.zipTree('libs/okio-1.14.0.jar'))
//    from(project.zipTree('libs/retrofit-2.4.0.jar'))
//    from(project.zipTree('libs/rxandroid-2.1.1.jar'))
//    from(project.zipTree('libs/rxjava-2.2.8.jar'))
//    from(project.zipTree('libs/gson-2.8.2.jar'))
//    from(project.zipTree('libs/reactive-streams-1.0.2.jar'))
//    //打进jar包后的文件目录
//    into('build/outputs/class/')
//    //include ,exclude参数来设置过滤
//    include('classes.jar')
//////    //指定打包的class
//    include "cn/wecloud/storage/*.class"
//    include "com/squareup/**/*.class"
//    include "io/reactivex/**/*.class"
//
//    //重命名
//    rename ('classes.jar', 'wecloud.jar')
//}
//makeJar.dependsOn(build)


//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
//}
//
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//task classesJar(type: Jar) {
//    from "$buildDir/intermediates/packaged-classes/ga/release"
//}
//
//artifacts {
//    archives classesJar
//    archives javadocJar
//    archives sourcesJar
//}

